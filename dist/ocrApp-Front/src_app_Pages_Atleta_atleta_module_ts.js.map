{"version":3,"file":"src_app_Pages_Atleta_atleta_module_ts.js","mappings":"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","sources":["./src/app/Pages/Atleta/atleta-routing.module.ts","./src/app/Pages/Atleta/atleta.module.ts","./src/app/Pages/Atleta/createatleta/components/createatleta/createatleta.component.ts","./src/app/Pages/Atleta/createatleta/components/createatleta/createatleta.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CreateatletaComponent } from './createatleta/components/createatleta/createatleta.component';\n\nconst routes: Routes = [\n  {\n    path : 'register',\n    // canActivate: [AuthGuard],\n    // canActivateChild: [AuthGuard],\n    component : CreateatletaComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AtletaRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DecimalPipe } from '@angular/common';\n\nimport { AtletaRoutingModule } from './atleta-routing.module';\nimport { CreateatletaComponent } from './createatleta/components/createatleta/createatleta.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { NgAisModule } from 'angular-instantsearch';\n\n\n@NgModule({\n  declarations: [\n    CreateatletaComponent\n  ],\n  imports: [\n    CommonModule,\n    AtletaRoutingModule,\n    FlexLayoutModule,\n    MatCardModule, \n    MatButtonModule,\n    MatMenuModule, \n    MatToolbarModule, \n    MatIconModule, \n    MatInputModule, \n    MatDatepickerModule, \n    MatNativeDateModule, \n    MatProgressSpinnerModule,\n    MatTableModule, \n    MatExpansionModule, \n    MatSelectModule, \n    MatSnackBarModule, \n    MatTooltipModule, \n    MatChipsModule, \n    MatListModule, \n    MatSidenavModule, \n    MatTabsModule, \n    MatProgressBarModule,\n    MatCheckboxModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatDialogModule,\n    MatGridListModule,\n    NgAisModule,\n    MatFormFieldModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [DecimalPipe],\n})\nexport class AtletaModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AtletaService } from '../../../services/atleta.service';\nimport { Categoria } from '../../../../Categoria/models/categoria.model';\nimport { CategoriaService } from '../../../../Categoria/services/categoria.service';\nimport { Competencia } from '../../../../Competencia/models/competencia.model';\nimport { Atleta } from '../../../models/atleta.model';\nimport { DecimalPipe } from '@angular/common';\n\ndeclare let alertify: any; \n\n@Component({\n  selector: 'app-createatleta',\n  templateUrl: './createatleta.component.html',\n  styleUrls: ['./createatleta.component.css']\n})\nexport class CreateatletaComponent implements OnInit {\n\n  dataForm:FormGroup\n  categoriaList:Categoria[] = [];\n  competenciaList:Competencia[] = []\n  atletasByCompetencia:Atleta[] = []\n\n  tipoDocumento:string[] = ['Cédula de ciudadanía', 'Tarjeta de identidad', 'Cédula de extranjería', 'Pasaporte', 'Permiso temporal de permanencia'];\n\n  idCategoria:string = \"\";\n  userLogin:any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private atletaService: AtletaService,\n    private categoriaService: CategoriaService,\n    private _decimalPipe: DecimalPipe,\n    public router : Router,\n  ) {}\n\n  ngOnInit() {\n    this.userLogin = JSON.parse(localStorage.getItem('authenticatedData')|| '')\n    this.createForm();\n    this.findCompetenciasInicio()\n  }\n\n  createForm(){\n    this.dataForm = this.formBuilder.group({\n      nombre_atleta: [\"\", [Validators.required]],\n      talla: [\"\", [Validators.required]],\n      tiempo_competencia: [null],\n      id_categoria: [\"\", [Validators.required]],\n      id_competencia: [\"\", [Validators.required]],\n      id_usuario: [this.userLogin.id, [Validators.required]],\n      no_atleta: [\"\", [Validators.required]],\n      no_oleada: [\"\"],\n      estado:[\"EN_COMPETENCIA\"]\n    });\n  }\n\n  onSubmit(){\n    console.log(\"this.dataForm\", this.dataForm.value);\n    \n    if(this.dataForm.invalid || this.validarCedula()){\n      console.log(\"Inválido\");\n      // alertify.set('notifier','position', 'top-right');\n      // alertify.warning('Formulario inválido!',2);\n      return;\n    }\n    this.saveAtleta();\n  }\n\n  saveAtleta(){\n    console.log(\"save saveAtleta\");\n    console.log(\"this.dataForm.\", this.dataForm.value)\n\n    this.atletaService.saveAtleta(this.dataForm.value)\n      .subscribe({\n        next: (data: any) => {\n          console.log(\"data atleta\", data);\n          if(data?.response == 'OK'){\n            // setTimeout(() => {\n              this.enviarEmail();\n            // }, 5000);\n          }\n        },\n        error: (err) => {\n          // this.showAlert = true;\n          // this.alert = {\n          //   type   : 'error',\n          //   message: `${err.errorDescription}`\n          // };\n        },\n      });\n  }\n\n  async enviarEmail(){\n    const subject:string = '¡Inscripción Confirmada a la Carrera OCR!';\n    const categ = this.categoriaList.find(item => item.id === this.dataForm.get('id_categoria')?.value);\n    await this.atletaService.enviarEmail(this.userLogin, this.dataForm.value, this.competenciaList[0], categ?.nombre, false, subject)\n      .subscribe({\n        next: (data: any) => {\n          console.log(\"data\", data);\n          if(data?.response == 'OK'){\n            alertify.set('notifier','position', 'top-right');\n            alertify.success('Competencia creada con exito!',2);\n\n            this.router.navigate(['/home']);\n          }\n        },\n        error: (err) => {\n          // this.showAlert = true;\n          // this.alert = {\n          //   type   : 'error',\n          //   message: `${err.errorDescription}`\n          // };\n        },\n      });\n  }\n\n  findCompetenciasInicio(){\n    this.categoriaService.getCompetenciasInicio()\n      .subscribe({\n        next: (data: Competencia[]) => {\n          console.log(\"data Competencia\", data);\n          this.competenciaList = data;\n        },\n        error: (err) => {\n          // this.showAlert = true;\n          // this.alert = {\n          //   type   : 'error',\n          //   message: `${err.errorDescription}`\n          // };\n        },\n      });\n  }\n\n  getCategoriaByCompetenciaId(idCompetencia:number){\n    this.atletaService.getCategoriaByCompetenciaId(idCompetencia)\n      .subscribe({\n        next: (data: Categoria[]) => {\n          console.log(\"data Categoria\", data);\n          this.categoriaList = data;\n        },\n        error: (err) => {\n          // this.showAlert = true;\n          // this.alert = {\n          //   type   : 'error',\n          //   message: `${err.errorDescription}`\n          // };\n        },\n      });\n  }\n\n  getCountAtletasByCompetencia(idCompetencia:number){\n    this.atletaService.getCountAtletasByCompetencia(idCompetencia)\n      .subscribe({\n        next: (data: Atleta[]) => {\n          this.atletasByCompetencia = data\n          console.log(\"data Atleta\", data);\n          this.dataForm.get('no_atleta')?.setValue(this._decimalPipe.transform((data.length + 1), '3.0-0')?.toString())\n          \n        },\n        error: (err) => {\n          // this.showAlert = true;\n          // this.alert = {\n          //   type   : 'error',\n          //   message: `${err.errorDescription}`\n          // };\n        },\n      });\n  }\n\n  selectCompetencia(element){\n    console.log(\"element\", element);\n    \n    this.getCategoriaByCompetenciaId(element.id)\n    // this.getCountAtletasByCompetencia(element.id)\n  }\n\n  selectCategoria(element){\n    console.log(\"categoria\", element);\n    this.idCategoria = element.id.toString()\n\n    this.getCategoriaByCompetenciaId(element.id_competencia)\n    this.getCountAtletasByCompetencia(element.id_competencia)\n  }\n\n  validarCedula(){\n    let existAtleta:boolean = false;\n    const findAtleta = this.atletasByCompetencia.find(item => item.id_usuario === this.dataForm.get('id_usuario')?.value);\n    console.log(\"findAtleta\", findAtleta);\n    if(findAtleta){\n      existAtleta = true;\n      alertify.set('notifier','position', 'top-right');\n      alertify.warning('El atleta ' + this.userLogin?.nombre + \" ya se encuentra registrado en esta competencia.\", 5);\n    }\n    return existAtleta;\n  }\n}\n","<div class=\"inner-container bg-white section-gap-lg\">\n    <div class=\"container\">\n      <div fxLayout='row wrap' fxLayoutAlign=\"center center\">\n        <div fxFlex.xs=\"100\" fxFlex.sm=\"100\" fxFlex.md=\"80\" fxFlex.lg=\"70\" fxFlex.xl=\"70\">\n          <div fxLayout='row wrap' fxLayoutAlign=\"center center\">\n            <div fxFlex.xs=\"100\" fxFlex.sm=\"100\" fxFlex.md=\"50\" fxFlex.lg=\"50\" fxFlex.xl=\"50\">\n              <div class=\"form-img register-image-atleta\">\n              </div>\n            </div>\n            <div fxFlex.xs=\"100\" fxFlex.sm=\"100\" fxFlex.md=\"50\" fxFlex.lg=\"50\" fxFlex.xl=\"50\">\n              <mat-card class=\"register-form form-margin\">\n                <h4>Registrar atleta</h4>\n                <!-- <p>Es rápido y fácil</p> -->\n                <form *ngIf=\"dataForm\" [formGroup]=\"dataForm\" (ngSubmit)=\"onSubmit()\">\n                  <div class=\"mb-4\">\n                    <mat-form-field class=\"w-100 mt-3\">\n                      <input matInput type=\"text\" formControlName=\"nombre_atleta\" placeholder=\"Nombre\" required>\n                      <mat-error *ngIf=\"dataForm.get('nombre_atleta').hasError('required')\">El campo no puede estar vacío</mat-error> \n                    </mat-form-field>\n\n                    <mat-form-field class=\"w-100 mt-3\">\n                      <input matInput type=\"text\" formControlName=\"talla\" placeholder=\"Talla\" required>\n                      <mat-error *ngIf=\"dataForm.get('talla').hasError('required')\">El campo no puede estar vacío</mat-error> \n                    </mat-form-field>\n\n                    <mat-form-field class=\"w-100 mt-3\">\n                        <mat-select class=\"w-full overflow-hidden\" formControlName=\"id_competencia\" \n                            *ngIf=\"competenciaList\" style=\"width: 100%\" placeholder=\"Seleccione una Competencia\">\n                          <mat-option>Seleccionar una Competencia</mat-option>\n                          <mat-option *ngFor=\"let item of competenciaList\" [value]=\"item.id\" (click)=\"selectCompetencia(item)\">\n                             {{item.nombre}}\n                          </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n\n                    <mat-form-field class=\"w-100 mt-3\">\n                        <mat-select class=\"w-full overflow-hidden\" formControlName=\"id_categoria\" \n                          style=\"width: 100%\" placeholder=\"Seleccione una Categoría\">\n                          <mat-option>Seleccionar una Categoría</mat-option>\n                          <mat-option *ngFor=\"let item of categoriaList\" [value]=\"item.id\" (click)=\"selectCategoria(item)\">\n                             {{item.nombre}}\n                          </mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"dataForm.get('id_categoria').hasError('required')\">El campo no puede estar vacío</mat-error> \n                    </mat-form-field>\n\n                    <mat-form-field class=\"w-100 mt-3\">\n                        <input matInput type=\"text\" formControlName=\"no_atleta\" placeholder=\"Número de Atleta\" required readonly>\n                      </mat-form-field>\n                  </div>\n                  <button class=\"button-lg mb-3\" color=\"primary\" mat-flat-button type=\"submit\">\n                    <span *ngIf=\"!dataForm.disabled\">\n                      Registrarse\n                    </span>\n                    <mat-progress-spinner *ngIf=\"dataForm.disabled\" [diameter]=\"24\" [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </button>\n\n                </form>\n              </mat-card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  "],"names":["Validators","i0","CreateatletaComponent","constructor","formBuilder","atletaService","categoriaService","_decimalPipe","router","ngOnInit","userLogin","JSON","parse","localStorage","getItem","createForm","findCompetenciasInicio","dataForm","group","nombre_atleta","required","talla","tiempo_competencia","id_categoria","id_competencia","id_usuario","id","no_atleta","no_oleada","estado","onSubmit","console","log","value","invalid","validarCedula","saveAtleta","subscribe","next","data","response","enviarEmail","error","err","subject","categ","categoriaList","find","item","get","competenciaList","nombre","alertify","set","success","navigate","getCompetenciasInicio","getCategoriaByCompetenciaId","idCompetencia","getCountAtletasByCompetencia","atletasByCompetencia","setValue","transform","length","toString","selectCompetencia","element","selectCategoria","idCategoria","existAtleta","findAtleta","warning","selectors","decls","vars","consts","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}